<snippet>
  <content><![CDATA[
  has_many :plural_name_table
  belongs_to :singula_name_table

  validates :field_name, presence: true
  validates :field_name, length: {maximum: number}
  validates :field_name, length: {minimum: number}
  validates :field_name, length: {in: number..number}
  validates :field_name, length: {is: number}
  validates :field_name, uniqueness: true
  validates :field_name, uniqueness: {
    scope: :field_name,
  }
  validates :field_name, uniqueness: {
    scope: [:field_name, :field_name, :field_name]
  }
  validates :size, numericality: {
    only_integer: true,
    greater_than: number_range,
    less_than: number_range,
  }
  validates :field_name, date: true
  validates :field_name, date: {before: field_name}
  validates :field_name, date: {after: field_name}
  validates :field_name, inclusion: {in: list_fields_choices}
  validates :field_name, format: {with: REGEX}

  before_validation :downcase_data
  before_destroy :can_destroy_it?
  before_create :can_add_it?
  before_save :before_save_method_name

  paginates_per number

  private

  def before_save_method_name
    something here
  end

  def can_add_it?
    if something
      errors[:base_or_attr] = 'error text'
      return false
    end
  end

  def can_destroy_it?
    if references.count > 0
      errors[:base_or_attr] = 'error text'
      return false
    end
  end

  def downcase_data
    self.attr = self.attr.mb_chars.downcase.to_s
  end



]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>rubyrailsmodel</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
