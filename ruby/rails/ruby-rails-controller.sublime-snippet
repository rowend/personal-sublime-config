<snippet>
  <content><![CDATA[

  before_action :get_object, only: [:show, :edit, :delete, :update, :destroy]

  def index
    @variable_model_name_plural = params[:model_name_singular] ? search_process : ModelName.page(params[:page])
  end

  def search; end

  def show
    @variable_model_name_singular = ModelName.find params[:id]
  end

  def new
    @variable_model_name_singular = ModelName.new
  end

  def edit
    @variable_model_name_singular = ModelName.find params[:id]
  end

  def delete
    @variable_model_name_singular = ModelName.find params[:id]
  end

  def create
    @variable_model_name_singular = ModelName.new get_params
    if @variable_model_name_singular.save
      message = 'registro agregadó con exito'
      redirect_to model_plural_name_path, flash: {success: message}
    else
      render 'new'
    end
  end

  def update
    @variable_model_name_singular = ModelName.find params[:id]
    if @variable_model_name_singular.update get_params
      message = 'registro modificadó con éxito'
      redirect_to model_plural_name_path, flash: {success: message}
    else
      render 'edit'
    end
  end

  def destroy
    @variable_model_name_singular = ModelName.find params[:id]
    if @variable_model_name_singular.destroy
      message = 'registro eliminadó con éxito'
      redirect_to model_plural_name_path, flash: {success: message}
    else
      render 'delete'
    end
  end

  private

  def get_object
    @variable_model_name_singular = ModelName.find params[:id]
  end

  def get_params
    fields = [
      :field_1,
      :field_2,
      :field_3,
      :field_4,
      :field_5,
    ]
    params.require(:model_name_singular).permit fields
  end

  def search_process
    query_string = params[:model_name_singular]
    sql = 'field_1 LIKE :field_1
           AND field_2 LIKE :field_2
           AND field_3 LIKE :field_3
          '
    fields = {
      field_1: "%#{query_string[:field_1]}%",
      field_2: "%#{query_string[:field_2]}%",
      field_3: "%#{query_string[:field_3]}%",
    }

    if query_string.has_key?(:foreing_model_name_singular_id) && !query_string[:foreing_model_name_singular_id].empty?
      sql << ' AND foreing_model_name_singular_id = :foreing_model_name_singular_id '
      fields[:foreing_model_name_singular_id] = query_string[:foreing_model_name_singular_id]
    end

    if query_string.has_key? 'boolean_field_name'
      sql << ' AND boolean_field_name = :boolean_field_name '
      fields[:boolean_field_name] = query_string[:boolean_field_name] == 'true' ? true : false
    end

    ModelName.where(sql, fields).page params[:page]
  end


]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>rubyrailscontroller</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
