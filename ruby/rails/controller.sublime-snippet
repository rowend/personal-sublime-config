<snippet>
    <content><![CDATA[

class ${1:Name}Controller < ApplicationController

  before_action :get_model, only: [:show, :edit, :delete, :update, :destroy]

  def index
    @${2:collectionmodelnameplural} = params[:${3:modelname}] ? make_search : ${4:ClassModel}.paginate(page: params[:page])
  end

  def search; end

  def show; end

  def new
    @${5:Test} = ${6:Test}.new
  end

  def edit; end

  def delete; end

  def create
    ${7:Test} = ${8:Test}.new allowed_params
    if ${9:Test}.save
      redirect_to ${10:Test}_path
    else
      render :new
    end
  end

  def update
    if @${11:Test}.update allowed_params
      redirect_to ${12:Test}_path
    else
      render :edit
    end
  end

  def destroy
    @${13:Test}.destroy
    redirect_to students_path
  end

  private

  def get_model
    @${14:Test} = ${15:Test}.find params[:id]
  end

  def allowed_params
    params.require(:${16:Test}).permit ${17:Test}_parameters
  end

  def make_search
    #students = params[:student]
    #sql = 'name LIKE :name
    #        AND last_name LIKE :last_name
    #        AND second_last_name LIKE :second_last_name '
    #fields = {
    #  name: "%#{students[:name]}%",
    #  last_name: "%#{students[:last_name]}%",
    #  second_last_name: "%#{students[:second_last_name]}%"
    #}
    #if students.key? :gender
    #  sql << ' AND gender = :gender '
    #  fields[:gender] = students[:gender] == 'true' ? true : false
    #end
    #Student.where(sql, fields).paginate page: params[:page]
  end

end


]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>rubyrailscontroller</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
